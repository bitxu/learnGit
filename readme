初始化git仓库 git init
添加文件到仓库，分两步
第一步：git add <file> 
第二步: git commit -m 完成
————————————————————————————————————————————————
时光穿梭机
git log 查看历史记录
git log --pretty=online 查看简洁的历史记录
HEAD   代表当前的版本  HEAD^ 代表上一个版本  HEAD^^ 代表上上个版本
git reset --hard HEAD^   回退到上一个版本
git reset --hard <comment id>  返回到commit id对应的版本  可以又回到现在  commit id 不用写全
git reflog  查看命令历史，当git log没法获得commit id时，可以看到某一个命令对应的commit id

——————————————————————————————————————————————————————————————————————
工作区和暂存区
git init 所在的文件就是我们的工作区

版本库：git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
git status 查看当前工作区和版本库的状态
	Changes not staged for commit:  更改还没有暂存以便提交
	Untracked files        没有被添加的文件
	Changes to be committed:
	nothing to commit (working directory clean) 没有更改需要提交
——————————————————————————————————————————————————————————————————————————
管理修改
第一次修改 -> git add -> 第二次修改 -> git commit
第一次修改 -> git add -> 第二次修改 -> git add -> git commit
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
————————————————————————————————————————————————————————————————————————————
撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
	注意：一定要--，不然就是一个新的分支了

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt之前已经被添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

