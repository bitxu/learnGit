远程仓库
1、注册一个github账户
2、在本地生成SSH KEY 
	ssh-keygen -t rsa -C "youremail@example.com"
	用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
3、在github上配置
	github->setting->ssh->“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
-------------------------------------------------------------
添加远程库
1、登录github，create a new repo ,创建一个新的仓库
2、把本地的版本库关联这个远程库，使用命令 git remote add origin git@server-name:path/repo-name.git
	添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库	
3、把本地的所有内容推送到远程库
	git push -u origin master
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
	从现在起，只要本地作了提交，就可以通过命令：
	$ git push origin master
	----------------------------------------------------
	SSH警告
	当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

	The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
	RSA key fingerprint is xx.xx.xx.xx.xx.
	Are you sure you want to continue connecting (yes/no)?

	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

	Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

	Warning: Permanently added 'github.com' (RSA) to the list of known hosts.

	这个警告只会出现一次，后面的操作就不会有任何警告了。

	如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。
-----------------------------------------------------------------------------
从远程库克隆
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

